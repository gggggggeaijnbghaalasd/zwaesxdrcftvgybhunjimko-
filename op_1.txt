local tppos2
local deathtpmod = {["Enabled"] = false}
local lplr = game.Players.LocalPlayer
local entityLibrary = shared.vapeentity
local connectionstodisconnect = {}
local function createwarning(title, text, delay)
	local suc, res = pcall(function()
		local frame = GuiLibrary["CreateNotification"](title, text, delay, "assets/WarningNotification.png")
		frame.Frame.Frame.ImageColor3 = Color3.fromRGB(236, 129, 44)
		return frame
	end)
	return (suc and res)
end
local RunLoops = {RenderStepTable = {}, StepTable = {}, HeartTable = {}}
do
	function RunLoops:BindToRenderStep(name, num, func)
		if RunLoops.RenderStepTable[name] == nil then
			RunLoops.RenderStepTable[name] = game:GetService("RunService").RenderStepped:Connect(func)
		end
	end

	function RunLoops:UnbindFromRenderStep(name)
		if RunLoops.RenderStepTable[name] then
			RunLoops.RenderStepTable[name]:Disconnect()
			RunLoops.RenderStepTable[name] = nil
		end
	end

	function RunLoops:BindToStepped(name, num, func)
		if RunLoops.StepTable[name] == nil then
			RunLoops.StepTable[name] = game:GetService("RunService").Stepped:Connect(func)
		end
	end

	function RunLoops:UnbindFromStepped(name)
		if RunLoops.StepTable[name] then
			RunLoops.StepTable[name]:Disconnect()
			RunLoops.StepTable[name] = nil
		end
	end

	function RunLoops:BindToHeartbeat(name, num, func)
		if RunLoops.HeartTable[name] == nil then
			RunLoops.HeartTable[name] = game:GetService("RunService").Heartbeat:Connect(func)
		end
	end

	function RunLoops:UnbindFromHeartbeat(name)
		if RunLoops.HeartTable[name] then
			RunLoops.HeartTable[name]:Disconnect()
			RunLoops.HeartTable[name] = nil
		end
	end
end
local GuiLibrary = shared.GuiLibrary
local timer_players = os.clock()
deathtpmod = GuiLibrary.ObjectsThatCanBeSaved.UtilityWindow.Api.CreateOptionsButton({
	Name = "BedTPRedirection",
	Function = function(callback)
		if callback then
			if callback then 
				local i_ = 0
				if os.clock() - timer_players < 1 then
					deathtpmod.ToggleButton(false)
					return print('its auto load btw')
				end 
				for i,bed in pairs(workspace:GetChildren()) do
					if bed.Name == "bed" then
						i_ = i_ + 1
					end
					if bed.Name == "bed" and bed.Covers.BrickColor ~= lplr.Team.TeamColor then
						pcall(function ()
						tppos2 = bed:GetChildren()[1].Position + Vector3.new(0,5,0)
						game.Players.LocalPlayer.Character.Humanoid.Health = 0
						--entity.fullEntityRefresh()
						repeat task.wait() until tppos2 == nil
						repeat task.wait() until not bed.Parent
						end)
					end
				end
				--local warning = createwarning("TPRedirection", "Set TP Position", 3)
			end
			deathtpmod.ToggleButton(false)
		end
	end
})
connectionstodisconnect[#connectionstodisconnect + 1] = lplr:GetAttributeChangedSignal("LastTeleported"):Connect(function(char)
	if tppos2 then 	
		task.spawn(function()
			task.wait(0.1)
			local root = entityLibrary.isAlive and entityLibrary.character.Humanoid.Health > 0 and entityLibrary.character.HumanoidRootPart
			if root and tppos2 then 
				if (workspace:GetServerTimeNow() - lplr:GetAttribute("LastTeleported")) > 1 then
					createwarning("DNut Private", "Anticheat will interfere cuz of ur lag.", 5)
					deathtpmod.ToggleButton(false)
				end
				RunLoops:BindToHeartbeat("TPRedirection", 1, function(dt)
					if root and tppos2 then 
						local dist = (1100 * dt)
						if (tppos2 - root.CFrame.p).Magnitude > dist then
							root.CFrame = root.CFrame + (tppos2 - root.CFrame.p).Unit * dist
							root.Velocity = (tppos2 - root.CFrame.p).Unit * 20
						else
							root.CFrame = root.CFrame + (tppos2 - root.CFrame.p)
						end
					end
				end)
				RunLoops:BindToStepped("TPRedirection", 1, function()
					if entityLibrary.isAlive then 
						for i,v in pairs(lplr.Character:GetChildren()) do 
							if v:IsA("BasePart") then v.CanCollide = false end
						end
					end
				end)
				repeat
					task.wait()
				until tppos2 == nil or (tppos2 - root.CFrame.p).Magnitude < 1
				RunLoops:UnbindFromHeartbeat("TPRedirection")
				RunLoops:UnbindFromStepped("TPRedirection")
				--createwarning("TPRedirection", "Teleported.", 5)
				tppos2 = nil
			end
		end)
	end
end)
local tppos2
local deathtpmod = {["Enabled"] = false}
local lplr = game.Players.LocalPlayer
local entityLibrary = shared.vapeentity
local connectionstodisconnect = {}
local RunLoops = {RenderStepTable = {}, StepTable = {}, HeartTable = {}}
do
	function RunLoops:BindToRenderStep(name, num, func)
		if RunLoops.RenderStepTable[name] == nil then
			RunLoops.RenderStepTable[name] = game:GetService("RunService").RenderStepped:Connect(func)
		end
	end

	function RunLoops:UnbindFromRenderStep(name)
		if RunLoops.RenderStepTable[name] then
			RunLoops.RenderStepTable[name]:Disconnect()
			RunLoops.RenderStepTable[name] = nil
		end
	end

	function RunLoops:BindToStepped(name, num, func)
		if RunLoops.StepTable[name] == nil then
			RunLoops.StepTable[name] = game:GetService("RunService").Stepped:Connect(func)
		end
	end

	function RunLoops:UnbindFromStepped(name)
		if RunLoops.StepTable[name] then
			RunLoops.StepTable[name]:Disconnect()
			RunLoops.StepTable[name] = nil
		end
	end

	function RunLoops:BindToHeartbeat(name, num, func)
		if RunLoops.HeartTable[name] == nil then
			RunLoops.HeartTable[name] = game:GetService("RunService").Heartbeat:Connect(func)
		end
	end

	function RunLoops:UnbindFromHeartbeat(name)
		if RunLoops.HeartTable[name] then
			RunLoops.HeartTable[name]:Disconnect()
			RunLoops.HeartTable[name] = nil
		end
	end
end
local timer_players = os.clock()
local GuiLibrary = shared.GuiLibrary
deathtpmod = GuiLibrary.ObjectsThatCanBeSaved.UtilityWindow.Api.CreateOptionsButton({
	Name = "PlayersTPRedirection",
	Function = function(callback)
		if callback then
			if callback then 
				if os.clock() - timer_players < 1 then
					deathtpmod.ToggleButton(false)
					return print('its auto load btw')
				end 
				local i_ = 0
				local tpos2backup
				for i,plr in pairs(game.Players:GetPlayers()) do
					task.wait(0.1)
						if plr.Character and plr ~= lplr and lplr.Team.TeamColor ~= plr.Team.TeamColor then
							pcall(function ()
						tpos2backup = plr.Character.HumanoidRootPart.Position + Vector3.new(0,5,0)
						tppos2 = plr.Character.HumanoidRootPart.Position + Vector3.new(0,5,0)
						game.Players.LocalPlayer.Character.Humanoid.Health = 0
						task.wait(1)
						pcall(function ()
							tppos2 = plr.Character.HumanoidRootPart.Position + Vector3.new(0,5,0)
						end)
						if not tppos2 then
							tppos2 = tpos2backup
						end
						task.wait(1)
						pcall(function ()
							tppos2 = plr.Character.HumanoidRootPart.Position + Vector3.new(0,5,0)
						end)
						if not tppos2 then
							tppos2 = tpos2backup
						end
						repeat task.wait() until tppos2 == nil
						pcall(function ()
							repeat task.wait() until not plr.Character:FindFirstChild("HumanoidRootPart")
						end)
						end)
						end
				end
			end
			deathtpmod.ToggleButton(false)
		end
	end
})
connectionstodisconnect[#connectionstodisconnect + 1] = lplr:GetAttributeChangedSignal("LastTeleported"):Connect(function(char)
	if tppos2 then 	
		task.spawn(function()
			task.wait(0.1)
			local root = entityLibrary.isAlive and entityLibrary.character.Humanoid.Health > 0 and entityLibrary.character.HumanoidRootPart
			if root and tppos2 then 
				if (workspace:GetServerTimeNow() - lplr:GetAttribute("LastTeleported")) > 1 then
					createwarning("DNut Private", "Anticheat will interfere cuz of ur lag.", 5)
					deathtpmod.ToggleButton(false)
				end
				RunLoops:BindToHeartbeat("TPRedirection", 1, function(dt)
					if root and tppos2 then 
						local dist = (1100 * dt)
						if (tppos2 - root.CFrame.p).Magnitude > dist then
							root.CFrame = root.CFrame + (tppos2 - root.CFrame.p).Unit * dist
							root.Velocity = (tppos2 - root.CFrame.p).Unit * 20
						else
							root.CFrame = root.CFrame + (tppos2 - root.CFrame.p)
						end
					end
				end)
				RunLoops:BindToStepped("TPRedirection", 1, function()
					if entityLibrary.isAlive then 
						for i,v in pairs(lplr.Character:GetChildren()) do 
							if v:IsA("BasePart") then v.CanCollide = false end
						end
					end
				end)
				repeat
					task.wait()
				until tppos2 == nil or (tppos2 - root.CFrame.p).Magnitude < 1
				RunLoops:UnbindFromHeartbeat("TPRedirection")
				RunLoops:UnbindFromStepped("TPRedirection")
				--createwarning("TPRedirection", "Teleported.", 5)
				tppos2 = nil
			end
		end)
	end
end)
local GuiLibrary = shared.GuiLibrary
local Settings = {}
SkipTimerr = GuiLibrary["ObjectsThatCanBeSaved"]["RenderWindow"]["Api"].CreateOptionsButton({
    ["Name"] = "SkipTimer",
    ["Function"] = function(callback) 
        if callback then 
            local key = game.Players.LocalPlayer:GetMouse().Hit.Position + Vector3.new(5,5,5)
            Settings.SkippedTimer = true
            local tween = game:GetService("TweenService")
            game.Players.LocalPlayer.Character.Humanoid.Died:Connect(function()
            repeat task.wait() pcall(function ()
                task.spawn(function ()
                    local info = TweenInfo.new(.01, Enum.EasingStyle.Linear,Enum.EasingDirection.In)
            tween:Create(game.Players.LocalPlayer.Character:WaitForChild("HumanoidRootPart"),info
            ,{CFrame = CFrame.new(key.X,key.Y,key.Z)}):Play()
        SkipTimerr.ToggleButton(false)
                end)
            end) until not Settings.SkippedTimer
            end)
        else
            Settings.SkippedTimer = false
        end
    end,
})
local RunLoops = {RenderStepTable = {}, StepTable = {}, HeartTable = {}}
do
	function RunLoops:BindToRenderStep(name, num, func)
		if RunLoops.RenderStepTable[name] == nil then
			RunLoops.RenderStepTable[name] = game:GetService("RunService").RenderStepped:Connect(func)
		end
	end

	function RunLoops:UnbindFromRenderStep(name)
		if RunLoops.RenderStepTable[name] then
			RunLoops.RenderStepTable[name]:Disconnect()
			RunLoops.RenderStepTable[name] = nil
		end
	end

	function RunLoops:BindToStepped(name, num, func)
		if RunLoops.StepTable[name] == nil then
			RunLoops.StepTable[name] = game:GetService("RunService").Stepped:Connect(func)
		end
	end

	function RunLoops:UnbindFromStepped(name)
		if RunLoops.StepTable[name] then
			RunLoops.StepTable[name]:Disconnect()
			RunLoops.StepTable[name] = nil
		end
	end

	function RunLoops:BindToHeartbeat(name, num, func)
		if RunLoops.HeartTable[name] == nil then
			RunLoops.HeartTable[name] = game:GetService("RunService").Heartbeat:Connect(func)
		end
	end

	function RunLoops:UnbindFromHeartbeat(name)
		if RunLoops.HeartTable[name] then
			RunLoops.HeartTable[name]:Disconnect()
			RunLoops.HeartTable[name] = nil
		end
	end
end
local entityLibrary = shared.vapeentity
local GuiLibrary = shared.GuiLibrary
local function createwarning(title, text, delay)
	local suc, res = pcall(function()
		local frame = GuiLibrary["CreateNotification"](title, text, delay, "assets/WarningNotification.png")
		frame.Frame.Frame.ImageColor3 = Color3.fromRGB(236, 129, 44)
		return frame
	end)
	return (suc and res)
end
local disabledproper = true
local flyup = false
local flydown = false
local flypress
local flyendpress
local flyupanddown = {Enabled = true}
local uis = game:GetService("UserInputService")
local cloned
local players = game:GetService("Players")
local textservice = game:GetService("TextService")
local repstorage = game:GetService("ReplicatedStorage")
local lplr = players.LocalPlayer

local function disablefunc(part)
	disabledproper = true
	part:Destroy()
	lplr.Character.Parent = game
	oldcloneroot.Parent = lplr.Character
	lplr.Character.PrimaryPart = oldcloneroot
	lplr.Character.Parent = workspace
	oldcloneroot.CanCollide = true
	oldcloneroot.Transparency = 1
	for i,v in pairs(lplr.Character:GetDescendants()) do 
		if v:IsA("Weld") or v:IsA("Motor6D") then 
			if v.Part0 == clone then v.Part0 = oldcloneroot end
			if v.Part1 == clone then v.Part1 = oldcloneroot end
		end
		if v:IsA("BodyVelocity") then 
			v:Destroy()
		end
	end
	for i,v in pairs(oldcloneroot:GetChildren()) do 
		if v:IsA("BodyVelocity") then 
			v:Destroy()
		end
	end
	if clone then 
		clone:Destroy()
		clone = nil
	end
	lplr.Character.Humanoid.HipHeight = hip or 2
	oldcloneroot = nil
end
local clonesuccess = false
local networkownertick = tick()
local isnetworkowner = isnetworkowner or function(part)
	if gethiddenproperty(part, "NetworkOwnershipRule") == Enum.NetworkOwnership.Manual then 
		sethiddenproperty(part, "NetworkOwnershipRule", Enum.NetworkOwnership.Automatic)
		networkownertick = tick() + 8
	end
	return networkownertick <= tick()
end
local function runcode(func)
	func()
end
local function getremote(tab)
	for i,v in pairs(tab) do
		if v == "Client" then
			return tab[i + 1]
		end
	end
	return ""
end
local Flamework = require(repstorage["rbxts_include"]["node_modules"]["@flamework"].core.out).Flamework
local bedwars = {}
repeat
	task.wait()
	KnitGotten, KnitClient = pcall(function()
		return debug.getupvalue(require(lplr.PlayerScripts.TS.knit).setup, 6)
	end)
until KnitGotten
local Client = require(repstorage.TS.remotes).default.Client
local InventoryUtil = require(repstorage.TS.inventory["inventory-util"]).InventoryUtil
runcode(function()
	bedwars = {
		AnimationType = require(repstorage.TS.animation["animation-type"]).AnimationType,
		AnimationUtil = require(repstorage["rbxts_include"]["node_modules"]["@easy-games"]["game-core"].out["shared"].util["animation-util"]).AnimationUtil,
		AppController = require(repstorage["rbxts_include"]["node_modules"]["@easy-games"]["game-core"].out.client.controllers["app-controller"]).AppController,
		AbilityController = Flamework.resolveDependency("@easy-games/game-core:client/controllers/ability/ability-controller@AbilityController"),
		AttackRemote = getremote(debug.getconstants(getmetatable(KnitClient.Controllers.SwordController)["attackEntity"])),
		BalloonController = KnitClient.Controllers.BalloonController,
		BalanceFile = require(repstorage.TS.balance["balance-file"]).BalanceFile,
		BatteryEffectController = KnitClient.Controllers.BatteryEffectsController,
		BatteryRemote = getremote(debug.getconstants(debug.getproto(debug.getproto(KnitClient.Controllers.BatteryController.KnitStart, 1), 1))),
		BlockBreaker = KnitClient.Controllers.BlockBreakController.blockBreaker,
		BlockController = require(repstorage["rbxts_include"]["node_modules"]["@easy-games"]["block-engine"].out).BlockEngine,
		BlockPlacer = require(repstorage["rbxts_include"]["node_modules"]["@easy-games"]["block-engine"].out.client.placement["block-placer"]).BlockPlacer,
		BlockCPSConstants = require(repstorage.TS["shared-constants"]).CpsConstants,
		BlockEngine = require(lplr.PlayerScripts.TS.lib["block-engine"]["client-block-engine"]).ClientBlockEngine,
		BlockEngineClientEvents = require(repstorage["rbxts_include"]["node_modules"]["@easy-games"]["block-engine"].out.client["block-engine-client-events"]).BlockEngineClientEvents,
		BlockPlacementController = KnitClient.Controllers.BlockPlacementController,
		BowConstantsTable = debug.getupvalue(KnitClient.Controllers.ProjectileController.enableBeam, 5),
		ProjectileController = KnitClient.Controllers.ProjectileController,
		ChestController = KnitClient.Controllers.ChestController,
		CannonHandController = KnitClient.Controllers.CannonHandController,
		CannonAimRemote = getremote(debug.getconstants(debug.getproto(KnitClient.Controllers.CannonController.startAiming, 5))),
		ClickHold = require(repstorage["rbxts_include"]["node_modules"]["@easy-games"]["game-core"].out.client.ui.lib.util["click-hold"]).ClickHold,
		ClientHandler = Client,
		ClientHandlerDamageBlock = require(repstorage["rbxts_include"]["node_modules"]["@easy-games"]["block-engine"].out.shared.remotes).BlockEngineRemotes.Client,
		ClientStoreHandler = require(lplr.PlayerScripts.TS.ui.store).ClientStore,
		CombatConstant = require(repstorage.TS.combat["combat-constant"]).CombatConstant,
		CombatController = KnitClient.Controllers.CombatController,
		ConstantManager = require(repstorage["rbxts_include"]["node_modules"]["@easy-games"]["game-core"].out["shared"].constant["constant-manager"]).ConstantManager,
		ConsumeSoulRemote = getremote(debug.getconstants(KnitClient.Controllers.GrimReaperController.consumeSoul)),
		DamageIndicator = KnitClient.Controllers.DamageIndicatorController.spawnDamageIndicator,
		DamageIndicatorController = KnitClient.Controllers.DamageIndicatorController,
		DefaultKillEffect = require(lplr.PlayerScripts.TS.controllers.game.locker["kill-effect"].effects["default-kill-effect"]),
		DropItem = getmetatable(KnitClient.Controllers.ItemDropController).dropItemInHand,
		DropItemRemote = getremote(debug.getconstants(getmetatable(KnitClient.Controllers.ItemDropController).dropItemInHand)),
		DragonSlayerController = KnitClient.Controllers.DragonSlayerController,
		DragonRemote = getremote(debug.getconstants(debug.getproto(debug.getproto(KnitClient.Controllers.DragonSlayerController.KnitStart, 2), 1))),
		EatRemote = getremote(debug.getconstants(debug.getproto(getmetatable(KnitClient.Controllers.ConsumeController).onEnable, 1))),
		EquipItemRemote = getremote(debug.getconstants(debug.getprotos(shared.oldequipitem or require(repstorage.TS.entity.entities["inventory-entity"]).InventoryEntity.equipItem)[3])),
		FishermanTable = KnitClient.Controllers.FishermanController,
		FovController = KnitClient.Controllers.FovController,
		GameAnimationUtil = require(repstorage.TS.animation["animation-util"]).GameAnimationUtil,
		EntityUtil = require(repstorage.TS.entity["entity-util"]).EntityUtil,
		getIcon = function(item, showinv)
			local itemmeta = bedwars.ItemTable[item.itemType]
			if itemmeta and showinv then
				return itemmeta.image
			end
			return ""
		end,
		getInventory = function(plr)
			local suc, result = pcall(function() 
				return InventoryUtil.getInventory(plr) 
			end)
			return (suc and result or {
				["items"] = {},
				["armor"] = {},
				["hand"] = nil
			})
		end,
		GrimReaperController = KnitClient.Controllers.GrimReaperController,
		GuitarHealRemote = getremote(debug.getconstants(KnitClient.Controllers.GuitarController.performHeal)),
		HangGliderController = KnitClient.Controllers.HangGliderController,
		HighlightController = KnitClient.Controllers.EntityHighlightController,
		ItemTable = debug.getupvalue(require(repstorage.TS.item["item-meta"]).getItemMeta, 1),
		KatanaController = KnitClient.Controllers.DaoController,
		KnockbackUtil = require(repstorage.TS.damage["knockback-util"]).KnockbackUtil,
		LobbyClientEvents = KnitClient.Controllers.QueueController,
		MinerRemote = getremote(debug.getconstants(debug.getproto(getmetatable(KnitClient.Controllers.MinerController).onKitEnabled, 1))),
		MageRemote = getremote(debug.getconstants(debug.getproto(KnitClient.Controllers.MageController.registerTomeInteraction, 1))),
		MageKitUtil = require(repstorage.TS.games.bedwars.kit.kits.mage["mage-kit-util"]).MageKitUtil,
		MageController = KnitClient.Controllers.MageController,
		MissileController = KnitClient.Controllers.GuidedProjectileController,
		PickupMetalRemote = getremote(debug.getconstants(debug.getproto(KnitClient.Controllers.MetalDetectorController.KnitStart, 1))),
		PickupRemote = getremote(debug.getconstants(getmetatable(KnitClient.Controllers.ItemDropController).checkForPickup)),
		ProjectileMeta = require(repstorage.TS.projectile["projectile-meta"]).ProjectileMeta,
		ProjectileRemote = getremote(debug.getconstants(debug.getupvalues(getmetatable(KnitClient.Controllers.ProjectileController)["launchProjectileWithValues"])[2])),
		QueryUtil = require(repstorage["rbxts_include"]["node_modules"]["@easy-games"]["game-core"].out).GameQueryUtil,
		QueueCard = require(lplr.PlayerScripts.TS.controllers.global.queue.ui["queue-card"]).QueueCard,
		QueueMeta = require(repstorage.TS.game["queue-meta"]).QueueMeta,
		RavenTable = KnitClient.Controllers.RavenController,
		RelicController = KnitClient.Controllers.RelicVotingController,
		ReportRemote = getremote(debug.getconstants(require(lplr.PlayerScripts.TS.controllers.global.report["report-controller"]).default.reportPlayer)),
		ResetRemote = getremote(debug.getconstants(debug.getproto(KnitClient.Controllers.ResetController.createBindable, 1))),
		Roact = require(repstorage["rbxts_include"]["node_modules"]["@rbxts"]["roact"].src),
		RuntimeLib = require(repstorage["rbxts_include"].RuntimeLib),
		Shop = require(repstorage.TS.games.bedwars.shop["bedwars-shop"]).BedwarsShop,
		ShopItems = debug.getupvalue(debug.getupvalue(require(repstorage.TS.games.bedwars.shop["bedwars-shop"]).BedwarsShop.getShopItem, 1), 2),
		SoundList = require(repstorage.TS.sound["game-sound"]).GameSound,
		SoundManager = require(repstorage["rbxts_include"]["node_modules"]["@easy-games"]["game-core"].out).SoundManager,
		SpawnRavenRemote = getremote(debug.getconstants(getmetatable(KnitClient.Controllers.RavenController).spawnRaven)),
		SprintController = KnitClient.Controllers.SprintController,
		StopwatchController = KnitClient.Controllers.StopwatchController,
		SwordController = KnitClient.Controllers.SwordController,
		TreeRemote = getremote(debug.getconstants(debug.getprotos(debug.getprotos(KnitClient.Controllers.BigmanController.KnitStart)[3])[1])),
		TrinityRemote = getremote(debug.getconstants(debug.getproto(getmetatable(KnitClient.Controllers.AngelController).onKitEnabled, 1))),
		ViewmodelController = KnitClient.Controllers.ViewmodelController,
		WeldTable = require(repstorage.TS.util["weld-util"]).WeldUtil
	}
end)
local matchState = 0
local cam = workspace.CurrentCamera
local clientstorestate = bedwars.ClientStoreHandler:getState()
local flyverticalspeed = {Value = 40}
local queueType = "bedwars_test"
queueType = clientstorestate.Game.queueType or "bedwars_test"
local flydelay = {Value = 125}
local megacheck = (queueType and queueType:find("mega") or queueType == "winter_event") and true or false
local allowed = entityLibrary.isAlive and ((lplr.Character:GetAttribute("InflatedBalloons") and lplr.Character:GetAttribute("InflatedBalloons") > 0) or matchState == 2 or megacheck) and 1 or 0
local blockraycast = RaycastParams.new()
blockraycast.FilterType = Enum.RaycastFilterType.Whitelist
local tppos
local flyvelo
fly = GuiLibrary.ObjectsThatCanBeSaved.BlatantWindow.Api.CreateOptionsButton({
	Name = "DNutPrivateFly",
	Function = function(callback)
		if callback then
			if not disabledproper then 
				createwarning("DNut Private", "Wait for the last tp to finish", 3)
				fly.ToggleButton(false)
				return 
			end
			local mousepos = lplr:GetMouse().UnitRay
			local rayparams = RaycastParams.new()
			rayparams.FilterDescendantsInstances = {workspace.Map, workspace:FindFirstChild("SpectatorPlatform")}
			rayparams.FilterType = Enum.RaycastFilterType.Whitelist
			local ray = workspace:Raycast(mousepos.Origin, mousepos.Direction * 10000, rayparams)
			if not ray then
				createwarning("DNut Private","Unable to find position.",5)
				return fly.ToggleButton(false)
			else
				ray = ray.Position
				tppos = ray
			end
			matchState = clientstorestate.Game.matchState or 0
			flypress = uis.InputBegan:Connect(function(input1)
				if flyupanddown.Enabled and game:GetService("UserInputService"):GetFocusedTextBox() == nil then
					if input1.KeyCode == Enum.KeyCode.Space or input1.KeyCode == Enum.KeyCode.ButtonA then
						flyup = true
					end
					if input1.KeyCode == Enum.KeyCode.LeftShift or input1.KeyCode == Enum.KeyCode.ButtonL2 then
						flydown = true
					end
				end
			end)
			flyendpress = uis.InputEnded:Connect(function(input1)
				if input1.KeyCode == Enum.KeyCode.Space or input1.KeyCode == Enum.KeyCode.ButtonA then
					flyup = false
				end
				if input1.KeyCode == Enum.KeyCode.LeftShift or input1.KeyCode == Enum.KeyCode.ButtonL2 then
					flydown = false
				end
			end)
			clonesuccess = false
			if entityLibrary.isAlive and entityLibrary.character.Humanoid.Health > 0 and isnetworkowner(entityLibrary.character.HumanoidRootPart) then
				cloned = lplr.Character
				oldcloneroot = entityLibrary.character.HumanoidRootPart
				lplr.Character.Parent = game
				clone = oldcloneroot:Clone()
				clone.Parent = lplr.Character
				oldcloneroot.Parent = cam
				bedwars["QueryUtil"]:setQueryIgnored(oldcloneroot, true)
				oldcloneroot.Transparency = 1
				clone.CFrame = oldcloneroot.CFrame
				lplr.Character.PrimaryPart = clone
				lplr.Character.Parent = workspace
				for i,v in pairs(lplr.Character:GetDescendants()) do 
					if v:IsA("Weld") or v:IsA("Motor6D") then 
						if v.Part0 == oldcloneroot then v.Part0 = clone end
						if v.Part1 == oldcloneroot then v.Part1 = clone end
					end
					if v:IsA("BodyVelocity") then 
						v:Destroy()
					end
				end
				for i,v in pairs(oldcloneroot:GetChildren()) do 
					if v:IsA("BodyVelocity") then 
						v:Destroy()
					end
				end
				if hip then 
					lplr.Character.Humanoid.HipHeight = hip
				end
				hip = lplr.Character.Humanoid.HipHeight
				clonesuccess = true
			end
			if not clonesuccess then 
				createwarning("DNut Private", "Character missing", 3)
				fly.ToggleButton(false)
				return 
			end
			local goneup = false
			RunLoops:BindToHeartbeat("DNutPrivateFly", 1, function(delta) 
				if entityLibrary.isAlive and (GuiLibrary.ObjectsThatCanBeSaved["Lobby CheckToggle"]["Api"].Enabled == false or matchState ~= 0) then
					if isnetworkowner(oldcloneroot) then 
						local newpos = {oldcloneroot.CFrame:GetComponents()}
						newpos[1] = clone.CFrame.X
						if newpos[2] < 1000 or (not goneup) then 
							createwarning("Infinite Fly", "go up", 3)
							newpos[2] = 100000
							goneup = true
						end
						newpos[3] = clone.CFrame.Z
						oldcloneroot.CFrame = CFrame.new(unpack(newpos))
						oldcloneroot.Velocity = Vector3.new(clone.Velocity.X, oldcloneroot.Velocity.Y, clone.Velocity.Z)
					else
						local newpos2 = {oldcloneroot.CFrame:GetComponents()}
						newpos2[2] = clone.CFrame.Y
						clone.CFrame = CFrame.new(unpack(newpos2))
					end
					allowed = 1
					local mass = (entityLibrary.character.HumanoidRootPart:GetMass() - 1.4) * (delta * 100)
					local flypos = entityLibrary.character.Humanoid.MoveDirection * 16
					entityLibrary.character.HumanoidRootPart.Transparency = 1
					entityLibrary.character.HumanoidRootPart.Velocity = flypos + (Vector3.new(0, mass + (flyup and flyverticalspeed.Value or 0) + (flydown and -flyverticalspeed.Value or 0), 0) * allowed)
					flyvelo = flypos + Vector3.new(0, mass + (flyup and flyverticalspeed.Value or 0) + (flydown and -flyverticalspeed.Value or 0), 0)
				end
			end)
		else
			RunLoops:UnbindFromHeartbeat("DNutPrivateFly")
			if clonesuccess and oldcloneroot and clone and lplr.Character.Parent == workspace and oldcloneroot.Parent ~= nil and disabledproper and cloned == lplr.Character then 
				local ray = workspace:Raycast(Vector3.new(oldcloneroot.Position.X, clone.CFrame.p.Y, oldcloneroot.Position.Z), Vector3.new(0, -1000, 0), blockraycast)
				clone.CFrame = CFrame.new(tppos)
				oldcloneroot.Velocity = Vector3.new(oldcloneroot.Velocity.X, -1, oldcloneroot.Velocity.Z)
				oldcloneroot.CFrame = clone.CFrame
				entityLibrary.character.Humanoid:ChangeState(Enum.HumanoidStateType.Landed)
				local part = Instance.new("Part")
				part.Anchored = true
				part.CanCollide = false
				part.Size = Vector3.new(1, 1, 1)
				part.Color = Color3.new(0.5, 0.5, 1)
				part.Transparency = 0.5
				part.Shape = Enum.PartType.Ball
				part.TopSurface = Enum.SurfaceType.Smooth
				part.BottomSurface = Enum.SurfaceType.Smooth
				part.Parent = workspace.GameSounds
				part.Position = oldcloneroot.Position
				disabledproper = false
				if isnetworkowner(oldcloneroot) then 
					createwarning("DNut Private", "Waiting "..(flydelay.Value / 100).."s to not flag", 3)
					task.delay(flydelay.Value / 100, disablefunc, part)
				else
					createwarning("DNut Private", "Waiting until not flagged", 10)
					task.spawn(function()
						repeat task.wait() until oldcloneroot and isnetworkowner(oldcloneroot) or oldcloneroot == nil
						local ray = workspace:Raycast(Vector3.new(oldcloneroot.Position.X, clone.CFrame.p.Y, oldcloneroot.Position.Z), Vector3.new(0, -1000, 0), blockraycast)
						oldcloneroot.Velocity = Vector3.new(0, -1, 0)
						oldcloneroot.CFrame = CFrame.new(oldcloneroot.Position.X, ray and ray.Position.Y + (entityLibrary.character.Humanoid.HipHeight + (oldcloneroot.Size.Y / 2)) or clone.CFrame.p.Y, oldcloneroot.Position.Z)
						entityLibrary.character.Humanoid:ChangeState(Enum.HumanoidStateType.Landed)
						createwarning("DNut Private", "Waiting 1.5s to not flag", 3)
						task.wait(1.5)
						disablefunc(part)
					end)
				end
			end
			flyup = false
			flydown = false
			if flypress then flypress:Disconnect() end
			if flyendpress then flyendpress:Disconnect() end
		end
	end,
	HoverText = "Test"
})
